# -*- coding: utf-8 -*-
"""save_disease_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cWvRQbTafICGR9ZzLV4qCVBzVuZ_UNMm
"""

import cv2
import glob
import pandas as pd
import numpy as np

from keras.layers import Dense, Activation, Dropout, Flatten, Conv2D, MaxPooling2D
from keras.models import Sequential
from keras.layers.normalization import BatchNormalization
from keras.models import load_model

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

"""#Alexnet apple"""

np.random.seed(1000)

alexnetApple = Sequential()

# 1st Convolutional Layer
alexnetApple.add(Conv2D(filters=96, input_shape=(224,224,3), kernel_size=(11,11), strides=(4,4), activation='relu'))
# Max Pooling
alexnetApple.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))

# 2nd Convolutional Layer
alexnetApple.add(Conv2D(filters=256, kernel_size=(11,11), activation='relu'))
# Max Pooling
alexnetApple.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))

# 3rd Convolutional Layer
alexnetApple.add(Conv2D(filters=384, kernel_size=(3,3), activation='relu'))

# 4th Convolutional Layer
alexnetApple.add(Conv2D(filters=384, kernel_size=(3,3),activation='relu'))

# 5th Convolutional Layer
alexnetApple.add(Conv2D(filters=256, kernel_size=(3,3),activation='relu'))
# Max Pooling
alexnetApple.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))

# Passing it to a Fully Connected layer
alexnetApple.add(Flatten())
# 1st Fully Connected Layer
alexnetApple.add(Dense(4096, input_shape=(224*224*3,),activation='relu'))
# Add Dropout to prevent overfitting
alexnetApple.add(Dropout(0.4))

# 2nd Fully Connected Layer
alexnetApple.add(Dense(4096,activation='relu'))
# Add Dropout
alexnetApple.add(Dropout(0.4))

# 3rd Fully Connected Layer
alexnetApple.add(Dense(1000,activation='relu'))
# Add Dropout
alexnetApple.add(Dropout(0.4))


# outputApple Layer
alexnetApple.add(Dense(4,activation='softmax'))

alexnetApple.summary()

# Compile the model
alexnetApple.compile(loss='categorical_crossentropy', optimizer="sgd", metrics=['accuracy'])

"""#apple Backend"""

pathApple = "/content/drive/My Drive/Colab Notebooks/5th semester project/Ai and Ml and Dl/data/Apple/"

outputApple = pd.read_csv(pathApple+"Apple.csv")
outputApple.head()

#Apple dataset
inputApple = []

for image in glob.glob(pathApple+"*/*.JPG"):
    image = cv2.imread(image)
    image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
    image = cv2.resize(image,(224,224))
    inputApple.append(image)

inputApple = np.array(inputApple)
inputApple = inputApple.astype("float32")/255.0

inputApple.shape

appleDisease = alexnetApple
appleDisease.fit(inputApple,outputApple,epochs=75)

_,accuracy = appleDisease.evaluate(inputApple,outputApple)
accuracy

appleDisease.save(pathApple+"apple.h5")

mod = load_model(pathApple+"apple.h5")

testApple = []

image = cv2.imread(pathApple+"Apple___Apple_scab/0B1709~1.JPG")
image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
image = cv2.resize(image,(224,224))
testApple.append(image)

testApple = (np.array(testApple)).astype("float32")/255.0

y_pred = mod.predict(testApple)

y_pred.shape

z = np.exp(y_pred)
deno = np.sum(z)
print(z/deno)

"""#Alexnet paddy"""

np.random.seed(1000)

alexnetPaddy = Sequential()

# 1st Convolutional Layer
alexnetPaddy.add(Conv2D(filters=96, input_shape=(224,224,3), kernel_size=(11,11), strides=(4,4), activation='relu'))
# Max Pooling
alexnetPaddy.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))

# 2nd Convolutional Layer
alexnetPaddy.add(Conv2D(filters=256, kernel_size=(11,11), activation='relu'))
# Max Pooling
alexnetPaddy.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))

# 3rd Convolutional Layer
alexnetPaddy.add(Conv2D(filters=384, kernel_size=(3,3), activation='relu'))

# 4th Convolutional Layer
alexnetPaddy.add(Conv2D(filters=384, kernel_size=(3,3),activation='relu'))

# 5th Convolutional Layer
alexnetPaddy.add(Conv2D(filters=256, kernel_size=(3,3),activation='relu'))
# Max Pooling
alexnetPaddy.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))

# Passing it to a Fully Connected layer
alexnetPaddy.add(Flatten())
# 1st Fully Connected Layer
alexnetPaddy.add(Dense(4096, input_shape=(224*224*3,),activation='relu'))
# Add Dropout to prevent overfitting
alexnetPaddy.add(Dropout(0.4))

# 2nd Fully Connected Layer
alexnetPaddy.add(Dense(4096,activation='relu'))
# Add Dropout
alexnetPaddy.add(Dropout(0.4))

# 3rd Fully Connected Layer
alexnetPaddy.add(Dense(1000,activation='relu'))
# Add Dropout
alexnetPaddy.add(Dropout(0.4))


# outputPaddy Layer
alexnetPaddy.add(Dense(4,activation='softmax'))

alexnetPaddy.summary()

# Compile the model
alexnetPaddy.compile(loss='categorical_crossentropy', optimizer="sgd", metrics=['accuracy'])

"""#paddy backend"""

pathPaddy = "/content/drive/My Drive/Colab Notebooks/5th semester project/Ai and Ml and Dl/data/Paddy/"

outputPaddy = pd.read_csv(pathPaddy+"Paddy.csv")
outputPaddy.head()

#Paddy dataset
inputPaddy = []

for image in glob.glob(pathPaddy+"*/*.jpg"):
    image = cv2.imread(image)
    image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
    image = cv2.resize(image,(224,224))
    inputPaddy.append(image)

inputPaddy = np.array(inputPaddy)
inputPaddy = inputPaddy.astype("float32")/255.0

inputPaddy.shape

PaddyDisease = alexnetPaddy
PaddyDisease.fit(inputPaddy,outputPaddy,epochs=150)

_,accuracy = PaddyDisease.evaluate(inputPaddy,outputPaddy)
accuracy

PaddyDisease.save(pathPaddy+"paddy.h5")

mod = load_model(pathPaddy+"paddy.h5")

testPaddy = []

image = cv2.imread(pathPaddy+"LeafBlast/IMG_20190419_095439.jpg")
image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
image = cv2.resize(image,(224,224))

testPaddy.append(image)
testPaddy = (np.array(testPaddy)).astype("float32")/255.0

y_pred = mod.predict(testPaddy)

y_pred.shape

z = np.exp(y_pred)
deno = np.sum(z)
print(z/deno)